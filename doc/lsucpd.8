.TH LSUCPD "8" "December 2023" "lsucpd\-0.91" LSUCPD
.SH NAME
lsucpd \- list USB\-C Power Delivery objects
.SH SYNOPSIS
.B lsucpd
[\fI\-\-caps\fR] [\fI\-\-data\fR] [\fI\-\-help\fR] [\fI\-\-json[=JO]\fR]
[\fI\-\-js\-file=JFN\fR] [\fI\-\-long\fR] [\fI\-\-pdo\-snk=SI_PDO[,IND]\fR]
[\fI\-\-pdo\-src=SO_PDO[,IND]\fR] [\fI\-\-rdo=RDO,REF\fR]
[\fI\-\-sysfsroot=PATH\fR] [\fI\-\-verbose\fR] [\fI\-\-version\fR]
[\fIFILTER ... \fR]
.SH DESCRIPTION
.\" Add any additional description here
The first part of this utility's name (i.e. "ls") comes from the Unix
command name to list file names (including directories). The
trailing "ucpd" is an abbreviation of "Usb type C Power Delivery". It joins
a growing family of Linux "ls" utilities such as lsblk, lscpu, lsfd, lsmem,
lsof, lspci, lsscsi and lsusb.
.PP
USB Power Delivery is often associated with the 24 pin USB Type C connector
typically shortened to USB\-C. Sysfs in Linux has two classes that cover
this facility: /sys/class/typec and /sys/class/usb_power_delivery. The
/sys/class/typec directory contains 'port<n>' and 'port<n>\-partner' entries.
A "port" is a USB type C endpoint and with the common USB\-C male\-to\-male
cabling, a port corresponds to female USB\-C connectors also knows as
receptacles. Modern laptops often have two or more female USB\-C receptacles
which Linux will number: port0, port1, etc. In the future entries in the
/sys/class/typec/port0/physical_location directory should accurately describe
where port 0 is (but not in lk 6.4).
.PP
Strictly speaking USB PD refers to use of a computer protocol (whose
transport is known as BMC) along a CC line that enables a maximum power of
100 Watts (20 Volts at 5 Amps) in what is now called SPR (the Standard Power
Range). USB PD revision 3.1 increased that maximum with the Extended Power
Range (EPR) to 240 Watts: 48 Volts at 5 Amps. Notice that is a maximum, and
many conditions must be met before 240 Watts can be supplied. USB Type C can
function without USB PD, with the protocol on the CC lines replaced by
resistors. In this mode Type C can supply a maximum of 5 Volts at 3 Amps (15
Watts). Many USB\-C devices such as USB flash (memory) keys use non\-PD mode.
.PP
USB PD endpoints are named 'pd<num>' and are found in the
/sys/class/usb_power_delivery directory. Currently only the source and sink
capabilities (if supported) are listed under each pd<num> directory. Adding
entries derived from the most recently accepted PD RDO (request data object)
command would be really helpful.
.PP
The default output of this utility is one line per local USB Type C port
on the host machine. If that port is in use (e.g. connected to a USB\-C power
adapter via a male to male cable) then (port) "partner" information may appear
to the right of line for the corresponding port.
.PP
A simple example:
    $ lsucpd
     port0 [pd0]  <<====  partner [pd8]
     port1 [pd1]  > {5V, 0.9A}
.PP
This shows that the Linux machine (e.g. a laptop) has two USB Type C
receptacles: port0 and port1. Both ports are USB PD capable with endpoints
named pd0 and pd1 respectively. The fact that port 0 has a partner indicates
a USB C male to male cable is connected to port 0 and what seems like a power
adapter at the other end whose endpoint is associated with pd8. sysfs
indicates power negotiated by the USB PD protocol is flowing in the direction
of the arrow: from pd8 to pd0. It would be useful to indicate the active
contract is 20 Volts at a maximum of 4.5 Amps to the right of that line but
the active RDO (Request Data Object) is not being properly reported in lk 6.4
series kernels.
.PP
The second line in the example output above shows that nothing is connected
to port1 but if it was, port1 would report that it can source 5 Volts at
0.9 Amps. More likely that port can source 1.5 Amps and the value shown
above (real output) is misreported.
.PP
Three options: \fI\-\-pdo\-snk=SI_PDO[,IND]\fR,
\fI\-\-pdo\-src=SO_PDO[,IND]\fR and \fI\-\-rdo=RDO,REF\fR simply decode the
numeric arguments given then exit. So these options don't depend on sysfs
or any connected USB\-C devices.
.PP
This utility can be categorized as "beta" software, amongst other reasons
being that USB PD reporting from the Linux kernel (currently lk 6.4) has
some rough edges (to put it mildly).
.SH OPTIONS
Arguments to long options are mandatory for short options as well. The options
are arranged in alphabetical order based on the long option name. Hyphenated
long options can also take underscore, and vice versa (e.g.
\fI\-\-js\-file=JFN\fR and \fI\-\-js_file=JFN\fR have the same meaning).
.TP
\fB\-c\fR, \fB\-\-caps\fR
under the PD protocol commences the sink and source swap "capabilities"
message. For the standard power range (SPR) each capabilities message will
be made of up to 7 PDOs (power data objects).
.br
If this option is given once then every sink and source PDO is summarized
in a single line like this:
    $ lsucpd \-c
     port0 [pd0]  <<====  partner [pd30]

    > pd0: has NO source capabilities
    >  pd0: sink capabilities:
       >> 1:fixed_supply; fixed: 5.00 Volts, 3.00 Amps (op)
       >> 2:variable_supply; variable: 5.00 to 20.00 Volts, 4.75 Amps (op)
       >> 3:battery; battery: 5.00 to 20.00 Volts, 95.00 Watts (op)
    > pd30: source capabilities:
      >> 1:fixed_supply; fixed: 5.00 Volts, 3.00 Amps (max)
      >> 2:fixed_supply; fixed: 9.00 Volts, 3.00 Amps (max)
      >> 3:fixed_supply; fixed: 12.00 Volts, 3.00 Amps (max)
      >> 4:fixed_supply; fixed: 15.00 Volts, 3.00 Amps (max)
      >> 5:fixed_supply; fixed: 20.00 Volts, 5.00 Amps (max)
      >> 6:programmable_supply; pps: 3.30 to 20.00 Volts, 5.00 Amps (max)
    >  pd30: has NO sink capabilities
.br
The one line PDO summaries are on lines that start with ">>". The part prior
to the semi\-colon is a directory name in sysfs where the data was found.
The leading number (e.g. 3 in "3:fixed_supply") is the PDO index, a value
that starts at 1.
.br
If this option is given twice, those summaries are expanded as shown here:
    $ lsucpd \-cc
    > pd0: has NO source capabilities
    >  pd0: sink capabilities:
       >> 1:fixed_supply
          dual_role_data='0'
          dual_role_power='0'
          fast_role_swap_current='0'
          higher_capability='0'
          operational_current='3000mA'
          unchunked_extended_messages_supported='0'
          unconstrained_power='0'
          usb_communication_capable='0'
          voltage='5000mV'
       >> 2:variable_supply
          maximum_voltage='20000mV'
          minimum_voltage='5000mV'
          operational_current='4750mA'
       >> 3:battery
          maximum_voltage='20000mV'
          minimum_voltage='5000mV'
          operational_power='95000mW'
.br
The output has been pruned, just showing the capabilities for pd0. Per
the PD specification, the first PDO must always be for 5 Volts and will
usually be for 3 Amps. What is more interesting is all the other settings
in the first PDO which are displayed as name='value' pairs. Their
definitions can be found in the PD specification, typically with the
underscore in the name replaced by a space and the first letter capitalized.
.br
If this option is given three times, the previous output is pruned to
only show the capabilities of the first PDO. This is done because only the
first PDO has settings other than those relating to voltage, current and/or
power. Those settings (e.g. dual_role_data and dual_role_power) apply to
all the higher number PDOs.
.br
In the standard power range (SPR) the maximum number of PDOs is 7. If no
source or sink PDOs are given, then a sink PDO of 5 Volts (Vsafe5v) is
assumed. The extended power range (EPR) has up to 11 PDOs but at this time
EPR is not supported by Linux.
.TP
\fB\-d\fR, \fB\-\-data\fR
USB data transmission protocols are asymmetric with one end known as
the 'host' usually issuing commands and the other end known as the "device"
usually acting on those commands. Prior to USB PD the host was always the
power source and the device end consumed power (a.k.a. the "sink"). In
USB PD if both ends are "dual\-role data" capable, then the host and
device data roles can be swapped, if both ends agree.
.br
When this option is given, a '|>' or '<|' annotation _may_ replace the
trailing two "==" on the power direction indication. For example:
    $ lsucpd \-d
    port0 [pd0]  <<====  partner [pd24]
    port1 [pd1]  <<==|>  partner [pd25]
.br
In the above example port0's partner is a USB\-C PD power adapter while
port1's partner is a USB\-C (thunderbolt 3) hub which has its own large
power supply. Both the laptop's port0 and port1 are power sinks but only
port1 has the '<<==|>' annotation. That annotation means port1 is a
power sink but is a USB host while its partner (the hub) is a power
source and a USB device. Why is port0's direction annotation '<<===='
which is that same as it would be if the \fI\-\-data\fR option was not
given?
.br
The answer is hidden in pd24 source capabilities' first PDO. There is a
setting in there called "USB Communications Capable" and it is zero
indicating that pd24 (port0\-partner) does not use D+, D\- nor any of the
superspeed lines. Many if not most USB\-C power adapters will have that
bit cleared, so talking about USB host and device is not relevant.
.TP
\fB\-h\fR, \fB\-\-help\fR
Output the usage message and exit.
.TP
\fB\-j\fR[=\fIJO\fR], \fB\-\-json\fR[=\fIJO\fR]
output is in JSON format instead of plain text form. Note that arguments
to the short and long form are themselves optional and if present start
with "=" and no whitespace is permitted around that "=".
.br
See the lsucpd_json(8) manpage or use '?' for \fIJO\fR to get a summary.
.TP
\fB\-J\fR, \fB\-\-js\-file\fR=\fIJFN\fR
Send the JSON output to a file named \fIJFN\fR instead of stdout. When
this option is given, the \fI\-\-json\fR option is not required unless
JSON settings in \fIJO\fR are needed.
.br
See the accompanying lsucpd_json(8) manpage.
.TP
\fB\-l\fR, \fB\-\-long\fR
when this option is given, some more information is provided. One example
is the raw value (in 32 bit hex) of the PDO. Also if the Request Data
Object (RDO) becomes available through sysfs, its value will be output.
The RDO shows the current (i.e. active) PD contract. In the Linux kernel 6.5
the power_supply subject in sysfs (i.e. under /sys/class/power_supply/ )
does not properly match the associated PD information (e.g. the sysfs
power_supply interface has no concept of power direction: sink or source)
but hopefully that will improve in the near future.
.br
For ports, the regular files in the /sys/class/typec/port<n>[\-partner]
directory are shown in name='value' form when this option is given.
.br
If this option is given twice an extra check is made for an entry whose
filename is "number_of_alternate_modes" in the directory mentioned in the
previous paragraph. If found and the value is greater than zero then
that port (typically the port<n>\-partner) supports 1 or more alternate
modes. If that value is 1 then a line like this appear in the output:
     Alternate mode: /sys/class/typec/port0\-partner/port0\-partner.0
.br
Under that directory should be the regular files in name='value' form.
One of those should be the description, for example:
       description='DisplayPort'
.br
Extra information will be supplied when the \fI\-\-verbose\fR option
is given. However its output it is sent to stderr and aimed more at
helping the author debug the code.
.TP
\fB\-p\fR, \fB\-\-pdo\-snk\fR=\fISI_PDO[,IND]\fR
\fISI_PDO\fR is a 32 bit integer representing a Power Data Object (PDO).
By default \fISI_PDO\fR is decimal, for compatibility with other Unix
CLI tools, but for PDOs hex would be a better fit. By adding a leading '0x'
or a trailing 'h' to \fISI_PDO\fR it will be parsed as hex. \fIIND\fR,
if given, is what is termed as the 'Object Position', which is a number
between 1 and 13. [So 0 is not valid, but is interpreted as not 1 which
is all the matters in this case.] The PDO at Object Position 1 carries
more information in its upper bits.
.br
Decoding PDOs changes slightly depending on whether they are sink or source
PDOs. When this option is used then \fISI_PDO\fR is decoded as a sink PDO.
.br
After decoding \fISI_PDO\fR, or reporting an error, this utility will exit.
So no examination of sysfs for USB\-C devices takes place.
.TP
\fB\-P\fR, \fB\-\-pdo\-src\fR=\fISO_PDO[,IND]\fR
\fISO_PDO\fR is a 32 bit integer representing a Power Data Object (PDO). The
action is similar to the \fI\-\-pdo\-snk=SI_PDO[,IND]\fR with 'sink'
replaced by 'source'.
.TP
\fB\-r\fR, \fB\-\-rdo\fR=\fIRDO,REF\fR
This option will decode \fIRDO\fR into its component fields.
\fIRDO\fR is a 32 bit integer representing a Request Data Object (RDO). To
decode a RDO one needs to know what type of source PDO its "Object Position'
field refers to. Those types are either Fixed, Battery, Variable, PPS or
AVS and one of those types must be given in the \fIREF\fR field. The first
letter of each is sufficient. The letters 'S' and 'E' are also accepted as
outlined in the next paragraph.
.IP
Prior to PD revision 3.2 the Adjustable Voltage Supply was only available
in EPR mode (15 to 48 Volts). However in PD revision 3.2 a new SPR AVS
variant was introduced (9 to 20 Volts). So now we have SPR_AVS and EPR_AVS.
If an unadorned 'AVS' is given then it is assumed to be EPR_AVS as it
pre\-existed SPR_AVS by 2.5 years.
.TP
\fB\-y\fR, \fB\-\-sysfsroot\fR=\fIPATH\fR
assumes sysfs is mounted at PATH instead of the default '/sys' . If this
option is given PATH should be an absolute path (i.e. start with '/').
.TP
\fB\-v\fR, \fB\-\-verbose\fR
outputs directory names where information is found. Use multiple times for
more output.
.TP
\fB\-V\fR, \fB\-\-version\fR
outputs version information then exits.
.SH EXAMPLES
The following examples were performed on a Thinkpad X13 Gen 3 (Lenovo)
which has two USB\-C ports. Lenovo advertises them as "USB4" with
Thunderbolt 4 support and "Power Delivery 3.0". So (some) SPR support but
no EPR support. With nothing connected to those ports:
    $ lsupd
    port0 [pd0]  <
    port1 [pd1]  <
.br
The "typec" identifier are shown first on each line: port0 and port1,
followed by the usb_power_delivery identifier in square brackets: pd0
and pd1. The '<' indicates the direction power will flow and for both
ports their default configuration is to receive power (i.e. be 'sink's).
Anything connected to those ports will be shown to the right of the '<'
or the '>'. In this case nothing is connected.
.PP
Now with a USB\-C memory stick connected to port0:
    $ lsucpd
    port0 [pd0]  > {5V, 1.5A}   partner
    port1 [pd1]  <
.br
port0 now has an unidentified 'partner' and power is being sourced by
the laptop: at a fixed voltage of 5 Volt with a 1.5 Amp maximum. Nothing
is connected to port 1.
.PP
A Dell 130 Watt USB\-C power adapter is now connected to port1:
    $ lsucpd
    port0 [pd0]  > {5V, 1.5A}   partner
    port1 [pd1]  <<====  partner [pd11]
.br
The '<<====' indicates a PD contract is active and the usb_power_delivery
identifier associated with the Dell power adapter is pd11. If the RDO
of that PD contract was available via sysfs (it isn't which is a hardware
of kernel issue) it would show '20V, 4.5A'.
.PP
Lot of information is available through the sink and source capabilities
that each end of a PD connection advertise to one another. The amount of
information output is controlled by the number of times the \fI\-\-caps\fR
option is given:
    $ lsucpd  pd38
    > pd38: source capabilities:
      >> 1:fixed_supply; fixed: 5.00 Volts, 3.00 Amps (max)
      >> 2:fixed_supply; fixed: 9.00 Volts, 3.00 Amps (max)
      >> 3:fixed_supply; fixed: 12.00 Volts, 3.00 Amps (max)
      >> 4:fixed_supply; fixed: 15.00 Volts, 3.00 Amps (max)
      >> 5:fixed_supply; fixed: 20.00 Volts, 5.00 Amps (max)
      >> 6:programmable_supply; pps: 3.30 to 20.00 Volts, 5.00 Amps (max)
.br
When a "pd" filter argument is given (e.g. pd38) the \fI\-\-caps\fR option
is assumed (otherwise nothing would be output). If a \fI\-\-caps\fR option
is given with a "pd" filter it is treated as if the \fI\-\-caps\fR option
had been given twice:
    $ lsucpd \-c pd38
    > pd38: source capabilities:
      >> 1:fixed_supply
          dual_role_data='1'
          dual_role_power='0'
          maximum_current='3000mA'
          unchunked_extended_messages_supported='0'
          unconstrained_power='1'
          usb_communication_capable='0'
          usb_suspend_supported='0'
          voltage='5000mV'
      >> 2:fixed_supply
          maximum_current='3000mA'
          voltage='9000mV'
      >> 3:fixed_supply
          maximum_current='3000mA'
          voltage='12000mV'
      >> 4:fixed_supply
          maximum_current='3000mA'
          voltage='15000mV'
      >> 5:fixed_supply
          maximum_current='5000mA'
          voltage='20000mV'
      >> 6:programmable_supply
          maximum_current='5000mA'
          maximum_voltage='20000mV'
          minimum_voltage='3300mV'
          pps_power_limited='0'
    >  pd38: has NO sink capabilities
.br
This is the same data as the previous data, just spread out with
the extra fields in the first PDO shown.
.PP
Here is an example using the \fI\-\-data\fR option:
    $ lsucpd \-\-data
    port0 [pd0]  |>==>>  partner [pd26]
    port1 [pd1]  <<==|>  partner [pd27]
.br
It shows that power (probably 5 Volts at a maximum of 3 Amps) is flowing
from the laptop's port0 to its partner which use a USB\-C DisplayPort
adapter. port1 is consuming power (i.e. it is a sink) sent by a powered
USB\-C hub. In both cases the laptop plays the role of a USB host and each
partner is a USB device.
.SH INTRODUCTION TO USB\-C PD
Here are some USB\-C PD basics. The plan is that only one type of cable will
be needed: a USB\-C male to male cable with up to 24 pins carrying power and
data from one end to the other. Since the pins are so small, four or more
pins are used to carry power which could be as large as 240 Watts (48 Volts
at 5 Amps DC).
.PP
USB\-C Power Delivery (PD) has almost nothing to do with the rest of USB,
USB "hosts" and "devices" are a secondary consideration (or not present).
Instead, USB\-C PD "sources" (providers of power) and "sinks" (consumers
of power) are the primary concepts.
.PP
USB PD signalling takes place over the CC line (Configuration Control) which
not only determines which end is the PD source and which is the PD sink, but
also things like Alternate mode (e.g. for carrying DisplayPort over USB\-C).
In the USB\-C receptacle (e.g. the socket on the side of a laptop), there are
two CC lines called CC1 and CC2. In the mating USB\-C plug (e.g. one end of a
USB\-C male to male cable) the same two lines are called CC and Vconn. Why
aren't the names the same? That is part of the excitement with reversible
cables! USB\-C PD cables are reversible in two senses: each plug can be taken
out and rotated 180 degrees and re\-inserted; the other sense is that each
end of the cable is the same, so the cable ends can be switched around.
For naming the PD relevant lines, it is best to think about CC and Vconn, CC
goes from one end of the USB\-C cable to the other while Vconn powers the
so\-called Emarker chip (required for cables that can carry more than 3 Amps)
and retimer chips needed in cables that can carry Superspeed data (e.g. 5,
10 and 20 Gbps). The most basic USB\-C male to male cables don't need Vconn.
Only USB\-C cables that contain retimer chips are referred to as "active".
.PP
A USB\-C PD source provides power, delivered between the Ground pins and the
VBus pins. There are four of each (i.e. pins) while Ground may also be
carried on the outer shield in the cable which is connected to the outer
shell in USB\-C plugs and receptacles. Notice that the USB\-C plug (male)
shell fits snugly inside the USB\-C receptacle (female connector) outer shell.
.PP
In the absence of USB\-C PD intelligence (i.e. computer protocols), resistors
are used to determine which end is a USB\-C source and which is a USB\-C sink.
A major difference between USB\-C PD and earlier generations is that no
voltage will be present on Vbus (hence no power) unless those resistors
(or the PD protocol) identify one end as a source and the other end as a
sink. So if two USB\-C PD sources (e.g. AC power adapters) are connected via
a male to male cable, no power will flow. Power banks which can both source
power and sink power (e.g. when its battery is being recharged) either
need separate USB\-C PD receptacles with at least one for charging, or, as
is more common now, need DRP USB\-C ports (receptacles). Dual Role
Power (DRP) means that a port can be switched from a sink to a source (or
vice\-versa) under protocol control. There is a related term call DRD
for Dual Role Data in which one end can specify whether it is a USB Host
or USB Device. When resistors are determining which is source or sink,
the source is assumed to be a USB Host and the sink is assumed to be a USB
device. This matches what previous generations of USB did.
The "no power will flow" claim is a small stretch: periodically a potential
USB\-C source will send a small amount of current on the CC lines to check if
anything has been recently connected.
.PP
DRP can cause issues for any devices that doesn't have its own battery. A USB
hub would be an example of this, especially "docks" available for many high
end laptops. If a power adapter (connected to the host AC supply) connected
to the hub suddenly loses power (e.g. a blackout) then the hub will reset
while the laptop can switch to its internal battery. Any USB device (even
self powered ones) connected to the hub will lose its connection to the
laptop only to re\-connect a short while later. But the damage may already
have been done. If the hub detects the AC power reducing, it could request
the laptop to do a "Fast Role Swap" (FRS) during which the laptop goes from
being a sink to a source without dropping the Vbus voltage (to zero).
.PP
USB\-C PD revision 1 is dead, curiously it tried to send the CC signal
modulated over the Vbus line, an experiment that failed in the real world. So
USB\-C PD revision 2 dropped support for USB A and B (i.e. previous
generations of USB) and only supported USB\-C which has a dedicated CC line
for the PD protocol traffic. USB\-C Revision 2 also introduced power output up
100 Watts or 60 Watts for cables that were not Emarked and thus could not
carry more than 3 Amps. Fixed voltages of 5 Volts, 9 Volts, 15 Volts and 20
Volts were introduced, the higher ones only if the output power was greater
than a certain level. So the maximum power was 100 Watts using 20 Volts at 5
Amps with a suitable cable. Notice that 12 Volts was not required but is
provided by many power adapters.
.PP
USB\-C PD revision 3.0 introduced the "Programmable Power Supply" feature (PPS)
in which the sink requests a range of voltages (e.g. 3.3 to 11 Volts) at an
operating current. The source would initially try to provide the highest
voltage in requested range but if the current draw exceeded the specified
operating current then the source would reduce the voltage until an
equilibrium point was reached. This is called current limiting (CL) or
constant current (CC) mode but the abbreviation CC is obviously confusing.
The CL function in the PD source is typically done via hardware which is
typically a bit safer (and faster) than doing it with software. That type of
current limiting is very useful for charging Lithium Ion batteries.
.SH JSON
JSON support in this utility is in its initial stages. It will probably
remain like this until USB PD visibility into the Linux kernel, plus how the
kernel reports that information to sysfs, becomes more mature. Regular files
in the relevant sysfs directories have their values output as strings. Only
a few strings are decoded, for example, the 'number_of_alternate_modes'
attribute is evaluated since if it is greater than zero more subdirectories
need to be visited. Note that this utility doesn't look for
specific (attribute/file) names, so if the Linux kernel changes, adds or
removes some names, that will be reflected in the plain text and JSON output.
.PP
When USB PD first became available it was handled within the BIOS or Embedded
Controller with no visibility given to the host Operating System. Only recent
generations of Intel laptop processors use ACPI to provide USB PD visibility
via the USB Type-C Connector System Software Interface (UCSI) Specification.
Capability data is available but on the author's laptop, RDO values are
incorrectly reported. The most recent, accepted Request Data Object (RDO)
is required to know the current PD contract and which end sent it. The Linux
kernel power_supply sysfs objects still don't seem to have a way to
represent "Dual Role Power" (DRP) which is the concepts of the power source
and sink switching roles, potentially with no power delivery interruption.
.SH AUTHOR
Written by Doug Gilbert
.SH "REPORTING BUGS"
Report bugs to <dgilbert at interlog dot com>. Cloning/copying sysfs from a
problematic machine will help a lot in debugging. The clone_pseudo_fs
utility is designed to do that job: by default it copies /sys to /tmp/sys .
Any sensitive data could then be pruned out of /tmp/sys after which it
could be sent to the author as a compressed tarball.
.SH COPYRIGHT
Copyright \(co 2023 Douglas Gilbert
.br
This software is distributed under the GPL version 2. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
.B lsucpd_json(lsucpd)
.B lspci
.B lsusb
.B lsblk
.B lsscsi(lsscsi)
.B clone_pseudo_fs(clone_pseudo_fs, github)
