.TH LSUPD "8" "August 2023" "lsupd\-0.90" LSUPD
.SH NAME
lsscsi \- list USB-C Power Delivery objects
.SH SYNOPSIS
.B lsupd
[\fI\-\-caps\fR] [\fI\-\-help\fR] [\fI\-\-json[=JO]\fR]
[\fI\-\-js\-file=JFN\fR] [\fI\-\-long\fR] [\fI\-\-sysfsroot=PATH\fR]
[\fI\-\-verbose\fR] [\fI\-\-version\fR] [\fIFILTER ... \fR]
[\fIH:C:T:L\fR]
.SH DESCRIPTION
.\" Add any additional description here
Despite appearances, this utility has nothing to do with UPDates. The first
part of its name (i.e. "ls") comes from the Unix command name to list
file names (including directories). The trailing "upd" is an abbreviation
of "USB Type C Power Delivery". It joins a growing family of Linux "ls"
utilities such as lsblk, lscpu, lsfd, lsmem, lsof, lspci, lsscsi and lsusb.
.PP
USB Power Delivery is often associated with the 24 pin USB Type C connector
typically shortened to USB\-C. Sysfs in Linux has two classes that cover
this facility: /sys/class/typec and /sys/class/usb_power_delivery. The
/sys/class/typec directory contains 'port<n>' and 'port<n>\-partner' entries.
A "port" is a USB type C endpoint and with the common USB-C male\-to\-male
cabling, a port corresponds to female USB\-C connectors also knows as
receptacles. Modern laptops often have two or more female USB-C receptacles
which Linux will number: port0, port1, etc. In the future entries in the
/sys/class/typec/port0/physical_location directory should accurately describe
where port 0 is (but not in lk 6.4).
.PP
Strictly speaking USB PD refers to use of a computer protocol (whose
transport is known as BMC) along a CC line that enables a maximum power of
100 Watts (20 Volts at 5 Amps) in what is now called SPR (the Standard Power
Range). USB PD revision 3.1 increased that maximum with the Extended Power
Range (EPR) to 240 Watts: 48 Volts at 5 Amps. Notice that is a maximum, and
many conditions must be met before 240 Watts can be supplied. USB Type C can
function without USB PD, with the protocol on the CC lines replaced by
resistors. In this mode Type C can supply a maximum of 5 Volts at 3 Amps (15
Watts). Many USB\-C devices such as USB flash (memory) keys use non\-PD mode.
.PP
USB PD endpoints are named 'pd<num>' and are found in the
/sys/class/usb_power_delivery directory. Currently only the source and sink
capabilities (if supported) are listed under each pd<num> directory. Adding
entries derived from the most recently accepted PD RDO (request data object)
command would be really helpful.
.PP
The default output of this utility is one line per local USB Type C port
on the host machine. If that port is in use (e.g. connected to a USB\-C power
adapter via a male to male cable) then (port) "partner" information may appear
to the right of line for the corresponding port.
.PP
A simple example:
    $ lsupd
     port0 [pd0]  <<===  partner: [pd8] 
     port1 [pd1]  > {5V, 0.9A}
.PP
This shows that the host has two USB Type C receptacles: port0 and port1.
Both ports are USB PD capable with endpoints named pd0 and pd1 respectively.
The fact that port 0 has a partner indicates a USB C male to male cable
is connected to port 0 and what seems like a power adapter at the other end
whose endpoint is associated with pd8. sysfs indicates power negotiated by
the USB PD protocol is flowing in the direction of the arrow: from pd8
to pd0. It would be useful to indicate the active contract is 20 Volts at
a maximum of 4.5 Amps to the right of each line but the active RDO (Request
Data Object) is not being properly reported in lk 6.4 series kernels.
.PP
The second line in the example output above shows that nothing is connected
to port1 but if it was, port1 would report that it can source 5 Volts at
0.9 Amps. More likely that port can source 1.5 Amps and the value shown
above (real output) is slightly misreported.
.PP
This utility can be categorized as "beta" software, amongst other reasons
being that USB PD reporting from the Linux kernel (currently lk 6.4) has
some rough edges (to put it mildly).
.SH OPTIONS
Arguments to long options are mandatory for short options as well. The options
are arranged in alphabetical order based on the long option name. Hyphenated
long options can also take underscore, and vice versa (e.g.
\fI\-\-js\-file=JFN\fR and \fI\-\-js_file=JFN\fR have the same meaning).
.TP
\fB\-c\fR, \fB\-\-caps\fR
reduces one line per device output to the tuple and the primary device name.
This may simplify scripts that process the output of this utility. With the
\fI\-\-generic\fR option it will show on each line the tuple (from which
the bsg pass\-through device name can be deduced), the primary device
name (which the block subsystem uses) and the sg device name (also a
pass\-through).
.br
.TP
\fB\-h\fR, \fB\-\-help\fR
Output the usage message and exit.
.TP
\fB\-j\fR[=\fIJO\fR], \fB\-\-json\fR[=\fIJO\fR]
output is in JSON format instead of plain text form. Note that arguments
to the short and long form are themselves optional and if present start
with "=" and no whitespace is permitted around that "=".
.br
See the lsupd_json(8) manpage or use '?' for \fIJO\fR to get a summary.
.TP
\fB\-J\fR, \fB\-\-js\-file\fR=\fIJFN\fR
Send the JSON output to a file named \fIJFN\fR instead of stdout. When
this option is given, the \fI\-\-json\fR option is not required unless
JSON settings in \fIJO\fR are needed.
.br
See the accompanying lsupd_json(8) manpage.
.TP
\fB\-l\fR, \fB\-\-long\fR
xxxxxxxxUse Linux default algorithm for naming devices (e.g. block major 8, minor 0
is "/dev/sda") rather than the "match by major and minor" in the "/dev"
directory as discussed above.
.TP
\fB\-y\fR, \fB\-\-sysfsroot\fR=\fIPATH\fR
assumes sysfs is mounted at PATH instead of the default '/sys' . If this
option is given PATH should be an absolute path (i.e. start with '/').
.TP
\fB\-v\fR, \fB\-\-verbose\fR
outputs directory names where information is found. Use multiple times for
more output.
.TP
\fB\-V\fR, \fB\-\-version\fR
outputs version information then exits. If used once outputs to stderr; if
used twice outputs to stdout and shortens the date to yyyymmdd numeric
format. The first number in the version string is the release number.
.SH EXAMPLES
xxxxxxxxxxxxxxx
.SH INTRODUCTION TO USB\-C PD
Here are some USB\-C PD basics. The plan is that only one type of cable will
be needed: a USB-C male to male cable with up to 24 pins carrying power and
data from one end to the other. Since the pins are so small, four or more
pins are used to carry power which could be as large as 240 Watts (48 Volts
at 5 Amps DC).
.PP
USB-C Power Delivery (PD) has almost nothing to do with the rest of USB,
USB "hosts" and "devices" are a secondary consideration (or not present).
Instead, us USB-C PD "sources" (providers of power) and "sinks" (consumers
of power) are the primary concepts.
.PP
USB PD signalling takes place over the CC line (Configuration Control) which
not only determines which end is the PD source and which is the PD sink, but
also things like Alternate mode (e.g. for carrying DisplayPort over USB-C).
In the USB-C receptacle (e.g. the socket on the side of a laptop), there are
two CC lines called CC1 and CC2. In the mating USB-C plug (e.g. one end of a
USB-C male to male cable) the same two lines are called CC and Vconn. Why
aren't the same names used? That is part of the excitement with reversible
cables! USB-C PD cables are reversible in two senses: each plug can be taken
out and rotated 180 degrees and re\-inserted; the other sense is that each
end of the cable is the same, so the cable ends can be switched around.
For naming the PD relevant lines, it is best to think about CC and Vconn, CC
goes from one end of the USB-C cable to the other while Vconn powers the
so\-called Emarker chip (required for cables that can carry more than 3 Amps)
and retimer chips needed in cables that can carry Superspeed data (e.g. 5,
10 and 20 Gbps). The most basic USB-C male to male cables don't need Vconn.
.PP
A USB\-C PD source provides power, delivered between the Ground pins and the
VBus pins. There are four of each (i.e. pins) while Ground may also be
carried on the outer shield in the cable which is connected to the outer
shell in USB\-C plugs and receptacles. Notice that the USB-C plug (male)
shell fits snugly inside the USB-C receptacle (female connector) outer shell.
.PP
In the absence of USB-C PD intelligence (i.e. computer protocols), resistors
are used to determine which end is a USB-C source and which is a USB-C sink.
A major difference between USB\-C PD and earlier generations is that no
voltage will be present on Vbus (hence no power) unless those resistors
(or the PD protocol) identify one end as a source and the other end as a
sink. So if two USB\-C PD sources (e.g. AC power adapters) are connected via
a male to male cable, no power will flow. Power banks which can both source
power and sink power (e.g. when its battery is being recharged) either
need separate USB\-C PD receptacles with at least one for charging, or, as
is more common now, need DRP USB\-C ports (receptacles). Dual Role
Power (DRP) means that a port can be switched from a sink to a source (or
vice-versa) under protocol control. There is a related term call DRD
for Dual Role Data in which one end can specify whether it is a USB Host
or USB Device. When resistors are determining which is source or sink,
the source is assumed to be a USB Host and the sink is assumed to be a USB
device. This matches what previous generations of USB did.
The "no power will flow" claim is a small stretch: periodically a potential
USB-C source will send a small amount of current on the CC lines to check if
anything has been recently connected.
.PP
DRP can cause issues for any devices that doesn't have its own battery. A USB
hub would be an example of this, especially "docks" available for many high
end laptops. If a power adapter (connected to the host AC supply) connected
to the hub suddenly loses power (e.g. a blackout) then the hub will reset
while the laptop can switch to its internal battery. Any USB device (even
self powered ones) connected to the hub will lose its connection to the
laptop only to re-connect a short while later. But the damage may already
have been done. If the hub detects the AC power reducing, it could request
the laptop to do a "Fast Role Swap" (FRS) during which the laptop goes from
being a sink to a source without dropping the Vbus voltage (to zero).
.PP
USB-C PD revision 1 is dead, curiously it tried to send the CC signal
modulated over the Vbus line, an experiment that failed in the real world. So
USB-C PD revision 2 dropped support for USB A and B (i.e. previous
generations of USB) and only supported USB\-C which has a dedicated CC line
for the PD protocol traffic. USB-C Revision 2 also introduced power output up
100 Watts or 60 Watts for cables that were not Emarked and thus could not
carry more than 3 Amps. Fixed voltages of 5 Volts, 9 Volts, 15 Volts and 20
Volts were introduced, the higher ones only if the output power was greater
than a certain level. So the maximum power was 100 Watts using 20 Volts at 5
Amps with a suitable cable. Notice that 12 Volts was not required but is
provided by many power adapters.
.PP
USB-C PD revision 3.0 introduced the "Programmable Power Supply" feature (PPS)
in which the sink requests a range of voltages (e.g. 3.3 to 11 Volts) at an
operating current. The source would initially try to provide the highest
voltage but if the current draw exceeded the specified operating current then
the source would reduce the voltage until an equilibrium point was reached.
This is called current limiting (CL) or constant current (CC) mode but the
abbreviation CC is obviosly confusing. The CL function in the PD source is
typically done via hardware which is typically a bit safer (and faster) than
doing it with software. That type of current limiting is very useful for
charging Lithium Ion batteries
.SH AUTHOR
Written by Doug Gilbert
.SH "REPORTING BUGS"
Report bugs to <dgilbert at interlog dot com>.
.SH COPYRIGHT
Copyright \(co 2023 Douglas Gilbert
.br
This software is distributed under the GPL version 2. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
.B lsupd_json(lsupd)
.B lspci
.B lsusb
.B lsblk
.B lsscsi(lsscsi)
